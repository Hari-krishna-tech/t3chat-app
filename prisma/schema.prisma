// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  accounts      Account[]
  sessions      Session[]
  threads       Thread[]  // Threads created by the user
  messages      Message[] // Messages sent by the user
  chats         Chat[]    // Chats the user is part of
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Thread {
  id        String    @id @default(cuid())
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String    // Creator of the thread
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[] // Messages in this thread
}

model Message {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   // Sender of the message
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  threadId  String?  // Optional: if message belongs to a thread
  thread    Thread?  @relation(fields: [threadId], references: [id], onDelete: Cascade)
  chatId    String?  // Optional: if message belongs to a chat
  chat      Chat?    @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model Chat {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String    // User who created the chat
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[] // Messages in this chat
}
